@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @(AtHelper.AtDbContextHelper.GetShortName(Model.ViewDataTypeName))CreateViewModel

@{
	var listMapping = AtHelper.AtDbContextHelper.ReadMetaDbContext("",  Model.ViewDataTypeName);
	var hasInputImage = false;
	var listBaseProperty = new List<string>();
	foreach (var property in Model.ModelMetadata.Properties)
	{
		if	(property.PropertyName.EndsWith("_Image"))
		{
			hasInputImage = true;
		}
		if (property.PropertyName == "Id" 
			|| property.PropertyName == "CreatedBy"
			|| property.PropertyName == "CreatedDate"
			|| property.PropertyName == "UpdatedBy"
			|| property.PropertyName == "UpdatedDate"
			|| property.PropertyName == "RowStatus"
			|| property.PropertyName == "RowVersion")
		{
			continue;
		}	
		
		if (property.Scaffold)
        {
			foreach(var mapping in listMapping)
			{
				if (mapping.NetName == property.PropertyName)
				{
					if (mapping.IsReadOnly)
					{
						continue;
					}
					
					listBaseProperty.Add(property.PropertyName);
					break;
				}
			}
        }
	}
}

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:

@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
@:<h4>@Model.ViewName @Model.ViewDataTypeShortName</h4>
@:<hr />


@:<form asp-action="@Model.ViewName">
	@:<div asp-validation-summary="ModelOnly" class="text-danger"></div>
	
	@:<div class="row form-group">	
		@:<div class="col-md-3 text-md-right ">
		@:</div>
		@:<div class="col-md-7">
			@:<input type="submit" value="Create" class="btn btn-primary" />
			@:<a asp-action="Index" class="k-button">Back to List</a>
		@:</div>
	@:</div>
	
foreach (var property in Model.ModelMetadata.Properties)
{
	if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly)
	{
		if (property.PropertyName == "Id" 
			|| property.PropertyName == "CreatedBy"
			|| property.PropertyName == "CreatedDate"
			|| property.PropertyName == "UpdatedBy"
			|| property.PropertyName == "UpdatedDate"
			|| property.PropertyName == "RowStatus"
			|| property.PropertyName == "RowVersion"
		)
		{
			continue;
		}
		@:
		foreach(var mapping in listMapping)
		{
			if (mapping.NetName == property.PropertyName)
			{
				if (mapping.IsReadOnly)
				{
					break;
				}
				
				@:<div class="row form-group">
					// Title label
					@:<div class="col-md-3 text-md-right ">
						@:<label asp-for="@property.PropertyName" class="col-form-label"></label>
						if(!mapping.AllowNull) {
							<span class="text-danger">*</span>
						}
					@:</div>
					
					// Control input
					if(!property.IsForeignKey && (
						mapping.MapSqlToNetType.IsDate
						|| mapping.MapSqlToNetType.IsDateTime
						|| mapping.MapSqlToNetType.IsTime
						|| mapping.MapSqlToNetType.IsNumeric
						|| (property.IsEnum && !property.IsEnumFlags))
					)
					{
						@:<div class="col-6 col-md-5 col-lg-4 col-xl-3">
							if (mapping.MapSqlToNetType.IsDate)
							{
								@:<kendo-datepicker for="@property.PropertyName" class="form-control" min="@@AtConstValidator.MIN_DATE_TIME" max="@@AtConstValidator.MAX_DATE_TIME" />	
							}
							else if (mapping.MapSqlToNetType.IsDateTime)
							{
								@:<kendo-datetimepicker for="@property.PropertyName" class="form-control" min="@@AtConstValidator.MIN_DATE_TIME" max="@@AtConstValidator.MAX_DATE_TIME" />
							}
							else if (mapping.MapSqlToNetType.IsTime)
							{
								@:<kendo-timepicker for="@property.PropertyName" class="form-control" />
							}
							else if (mapping.MapSqlToNetType.IsNumeric)
							{
								var minMaxType = property.TypeName;
								if (mapping.AllowNull){
									minMaxType = mapping.MapSqlToNetType.NetFullType;
								}
								if (property.TypeName == "System.Decimal")
								{
									minMaxType = "System.Double";
								}
								
								var forceInteger="";
								if (mapping.MapSqlToNetType.IsInteger) {
									forceInteger="decimals=\"0\" restrict-decimals=\"true\" format=\"N0\"";
								}
								
								@:<kendo-numerictextbox for="@property.PropertyName" class="form-control" min="@@@(minMaxType).MinValue" max="@@@(minMaxType).MaxValue" @forceInteger />
							}
							else if (property.IsEnum)
							{
								@:<kendo-dropdownlist for="@property.PropertyName" class="form-control" bind-to="@@Html.GetEnumSelectList<@property.TypeName>()" />
							}
						@:</div>
					}
					else if (property.PropertyName.EndsWith("_Html"))
					{
		@:<div class="col-12">
        @:    @@(Html.Kendo().EditorFor(h => h.@property.PropertyName).Encoded(false)
        @:          .HtmlAttributes(new { style = "height:440px" })
        @:          .Resizable(resizable => resizable.Content(true))
        @:          .Tools(tools => tools
        @:            .Clear()
        @:            .CleanFormatting()
        @:            .Formatting()
        @:            .ForeColor()
        @:            .BackColor()
        @:            .Bold()
        @:            .Italic()
        @:            .Underline()
        @:            .Strikethrough()
        @:            .JustifyLeft()
        @:            .JustifyCenter()
        @:            .JustifyRight()
        @:            .JustifyFull()
        @:            .InsertUnorderedList()
        @:            .InsertOrderedList()
        @:            .Outdent()
        @:            .Indent()
        @:            .CreateLink()
        @:            .Unlink()
        @:            .InsertImage()
        @:            .SubScript()
        @:            .SuperScript()
        @:            .TableEditing()
        @:            .FontName()
        @:            .FontSize()
        @:        )
        @:          .ImageBrowser(imageBrowser => imageBrowser
        @:              .Image("~/" + ImageBrowser@(Model.ViewDataTypeShortName)Controller.FOLDER_NAME + "/{0}")
        @:              .Read("Read", (string)ViewData["ControllerNameForImageBrowser"])
        @:              .Destroy("Destroy", (string)ViewData["ControllerNameForImageBrowser"])
        @:              .Upload("Upload", (string)ViewData["ControllerNameForImageBrowser"])
        @:          )
        @:    )
        @:</div>
					}
					else 
					{
						@:<div class="col-md-7">
							if (property.IsForeignKey)
							{
								var optionLabel = "";
								if(mapping.AllowNull){
									optionLabel = "option-label=\"--- None ---\"";
								}
								@:<kendo-dropdownlist for="@property.PropertyName" class="form-control" bind-to="@@ViewBag.@property.PropertyName" @optionLabel />
							}
							else if(mapping.MapSqlToNetType.IsBool)
							{
								@:<kendo-switch for="@property.PropertyName" checked="@@Model?.@property.PropertyName"/>
							}
							else if (property.PropertyName.EndsWith("_Image"))
							{
								@:<button id="btnChooseImage_@property.PropertyName" class="btn mb-1">Choose image</button>
								@:<input type="hidden" asp-for="@property.PropertyName"/>
								@:<img class="border border-primary" id="img_@property.PropertyName" src="@@Url.Content(Model?.@property.PropertyName)" />
							}
							else if (property.IsMultilineText)
							{
								@:<textarea asp-for="@property.PropertyName" class="k-textbox form-control"></textarea>
							}
							else 
							{
								@:<input asp-for="@property.PropertyName" class="k-textbox form-control" />
							}
							
						@:</div>	
					}                            
					
					// Validation message
					@:<div class="offset-md-3 col-md-7 at-wrapper-validate">
						@:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
					@:</div>
				@:</div>
				
				break;
			}
		}
		
		// temp continue
		continue;
	}
}
}
	<div class="row form-group">	
		<div class="col-md-3 text-md-right ">
		</div>
		<div class="col-md-7">
			<input type="submit" value="Create" class="btn btn-primary" />
			<a asp-action="Index" class="k-button">Back to List</a>
		</div>
	</div>
</form>



@foreach (var property in Model.ModelMetadata.Properties)
{
	if (property.PropertyName.EndsWith("_Image"))
	{
@:@@(Html.Kendo().Dialog()
@:	.Name("dialogChooseImage_@property.PropertyName")
@:	.Title("Choose image")
@:	.Content("<div id=\"divChooseImage_@property.PropertyName\"></div>")
@:	.Width(600)
@:	.Visible(false)
@:	.Modal(true)
@:)
	}	
}



@{
    if (Model.ReferenceScriptLibraries)
    {
@:@@section Scripts {
    @:@@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
	
	if(hasInputImage)
	{
	@:<script>
    @:    $(document).ready(function () {
		
		foreach (var property in Model.ModelMetadata.Properties)
		{
			if (property.PropertyName.EndsWith("_Image"))
			{
    @:        $("#divChooseImage_@property.PropertyName").kendoImageBrowser({
    @:            transport: {
    @:                type: "imagebrowser-aspnetmvc",
    @:                read: "@@Url.Action("Read", (string)ViewData["ControllerNameForImageBrowser"])",
    @:                destroy: "@@Url.Action("Destroy", (string)ViewData["ControllerNameForImageBrowser"])",
    @:                imageUrl: "@@Url.Content("~/" + ImageBrowser@(Model.ViewDataTypeShortName)Controller.FOLDER_NAME + "/{0}")",
    @:                uploadUrl: "@@Url.Action("Upload", (string)ViewData["ControllerNameForImageBrowser"])"
    @:            },
    @:            apply: function () {
    @:                var selectedImage = this.value();
    @:                $("#@property.PropertyName").val(selectedImage);
    @:                $("#img_@property.PropertyName").attr("src", selectedImage);
    @:                $('#dialogChooseImage_@property.PropertyName').data("kendoDialog").close();
    @:            }
    @:        });
@:
    @:        $("#btnChooseImage_@property.PropertyName").click(function (e) {
    @:            e.preventDefault();
    @:            $('#dialogChooseImage_@property.PropertyName').data("kendoDialog").open();
    @:            
    @:        });
			}
		}
    @:    });
    @:</script>	
	}
	
@:}
    }
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    // Do we need to use this in conjunction with the PrimaryKey check?
    bool IsPropertyGuid(IPropertyMetadata property)
    {
        return string.Equals("System.Guid", property.TypeName, StringComparison.OrdinalIgnoreCase);
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }
}
