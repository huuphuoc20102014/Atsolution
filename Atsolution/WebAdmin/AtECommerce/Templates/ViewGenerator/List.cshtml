@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq

@@inject IStringLocalizer<SharedResources> SharedLocalizer
@@inject IViewLocalizer Localizer
@@inject IStringLocalizer<@(Model.ViewDataTypeShortName)> EntityLocalizer
@@inject IStringLocalizer<BaseEntityResources> BaseEntityLocalizer

@{
	var hasSortIndex = false;
	var modelProperties = new List<string>();
    foreach (var property in Model.ModelMetadata.Properties)
    {
        if (property.Scaffold)
        {
            modelProperties.Add(property.PropertyName);
			if	(property.PropertyName == "SortIndex"){
				hasSortIndex = true;
			}
        }
		
    }
	
	var _slugProperty = AtHelper.AtDbContextHelper.GetSlugProperty(modelProperties);
	var _idOrSlugName = "Id";
	if(_slugProperty != ""){
		_idOrSlugName = _slugProperty;
	}
	var listMapping = AtHelper.AtDbContextHelper.ReadMetaDbContext("",  Model.ViewDataTypeName);
	
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] =  SharedLocalizer["ViewTitle_List"]  + " " + EntityLocalizer["EntityTitle"];
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
		
    @:var parentItem = ViewData["ParentItem"] as @(Model.ViewDataTypeShortName);
    
    @:if (parentItem != null)
    @:{
    @:    ViewData["Title"] = (string)ViewData["Title"] + " : " + parentItem.Code + " | " + parentItem.Name;
    @:}
		
@:}
@:

@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@@SharedLocalizer["ViewTitle_List"]  @@EntityLocalizer["EntityTitle"]</title>
@:</head>
@:<body>
        //    PushIndent("    ");
    }

@:<div class="container">
@:	<h4>
@:		@@SharedLocalizer["ViewTitle_List"] @@EntityLocalizer["EntityTitle"]
@:		@@if (parentItem != null)
@:        {
@:            @@:: <span class="text-warning">@@parentItem.Code | @@parentItem.Name</span>
@:        }
@:	</h4>
@:	<hr />	
@:	
@:	<p>
		@:<a asp-action="Create" class="btn btn-primary">@@SharedLocalizer["Btn_CreateNew"]</a>
		
		@:@@if (parentItem != null)
        @:{
		if(hasSortIndex){
			@:<a asp-action="Sort" asp-route-id="@@parentItem.@_idOrSlugName" class="btn btn-primary">@@SharedLocalizer["Btn_SortIndex"]</a>
		}	
        @:    <a asp-action="Index" asp-route-id="" class="btn btn-primary">@@SharedLocalizer["Btn_ListAll"]</a>
        @:}
        @:else
        @:{
		if(hasSortIndex){
			@:<a asp-action="Sort" class="btn btn-primary">@@SharedLocalizer["Btn_SortIndex"]</a>
		}
        @:}

@:	</p>
@:</div>
@:
@:@@(Html.Kendo().Grid<@(Model.ViewDataTypeShortName)DetailsViewModel>()
    @:.Name("grid@(Model.ViewDataTypeShortName)")
    @:.Columns(columns =>
    @:{
        @:columns.Bound(c => c.Id).Title(" ").Width(180).Locked(true).Filterable(false).Sortable(false).ClientTemplate(
        @:    "<a class=\"btn btn-success\" data-toggle=\"tooltip\" title=\"" + SharedLocalizer["Ttip_Detail"] + "\"" +
        @:        "href='" + Url.Action("Details", ((string)ViewData["ControllerNameForGrid"])) + "/#= " + nameof(@(Model.ViewDataTypeShortName).@_idOrSlugName) + " #'" +
        @:    "><i class=\"far fa-eye\"></i></a> " +
@:
        @:    "<a class=\"btn btn-success\" data-toggle=\"tooltip\" title=\"" + SharedLocalizer["Ttip_Edit"] + "\"" +
        @:        "href='" + Url.Action("Edit", ((string)ViewData["ControllerNameForGrid"])) + "/#= " + nameof(@(Model.ViewDataTypeShortName).@_idOrSlugName) + " #'" +
        @:    "><i class=\"far fa-pencil\"></i></a> " +
@:
        @:    "<a class=\"btn btn-danger\" data-toggle=\"tooltip\" title=\"" + SharedLocalizer["Ttip_Delete"] + "\"" +
        @:        "href='" + Url.Action("Delete", ((string)ViewData["ControllerNameForGrid"])) + "/#= " + nameof(@(Model.ViewDataTypeShortName).@_idOrSlugName) + " #'" +
        @:    "><i class=\"far fa-trash-alt\"></i></a> "
        @:);		
		
		if(modelProperties.Contains("RowStatus"))
		{
			@:columns.Bound(c => c.RowStatus).Title(BaseEntityLocalizer[nameof(BaseEntityResources.RowStatus)]).Width(150).HtmlAttributes(new { @@class = "text-nowrap" });
		}
		if(modelProperties.Contains("Code"))
		{
			@:columns.Bound(c => c.Code).Title(BaseEntityLocalizer[nameof(BaseEntityResources.Code)]).Width(200).HtmlAttributes(new { @@class = "text-nowrap" });
		}
		if(modelProperties.Contains("Name"))
		{
			@:columns.Bound(c => c.Name).Title(BaseEntityLocalizer[nameof(BaseEntityResources.Name)]).Width(200).HtmlAttributes(new { @@class = "text-nowrap" });
		}
		if(_slugProperty != "")
		{
			@:columns.Bound(c => c.@_slugProperty).Title(BaseEntityLocalizer[nameof(BaseEntityResources.Slug)]).Width(200).HtmlAttributes(new { @@class = "text-nowrap" });
		}
		
		foreach (var property in Model.ModelMetadata.Properties)
		{
			if(property.PropertyName == "Id" 
				|| property.PropertyName == "CreatedBy"
				|| property.PropertyName == "CreatedDate"
				|| property.PropertyName == "UpdatedBy"
				|| property.PropertyName == "UpdatedDate"
				|| property.PropertyName == "RowStatus"
				|| property.PropertyName == "RowVersion"
				
				|| property.PropertyName == "Code"
				|| property.PropertyName == "Name"
				|| property.PropertyName == _slugProperty
				
				|| property.PropertyName == "AutoSlug"
				|| property.PropertyName.EndsWith("_Html")
				
				){
				continue;
			}
			
			foreach(var mapping in listMapping)
			{
				if (mapping.NetName == property.PropertyName)
				{
					if(property.IsForeignKey)
					{
						foreach (var nav in Model.ModelMetadata.Navigations)
						{
							if(nav.ForeignKeyPropertyNames[0] == property.PropertyName)
							{
								@://@nav.ForeignKeyPropertyNames[0]
			@:columns.Bound(c => c.@(nav.AssociationPropertyName)_Code).Title(EntityLocalizer[nameof(@(Model.ViewDataTypeShortName).@(nav.AssociationPropertyName)_Code)]).Width(200).HtmlAttributes(new { @@class = "text-nowrap" });								
							}
						}
					}
					else if(mapping.MapSqlToNetType.IsNumeric){
						if(mapping.MapSqlToNetType.IsInteger){
			@:columns.Bound(c => c.@(property.PropertyName)).Title(EntityLocalizer[nameof(@(Model.ViewDataTypeShortName).@(property.PropertyName))]).Width(150).Format("{0:N0}").HtmlAttributes(new { @@class = "col-align-right text-nowrap" });
						}
						else {
							
			@:columns.Bound(c => c.@(property.PropertyName)).Title(EntityLocalizer[nameof(@(Model.ViewDataTypeShortName).@(property.PropertyName))]).Width(150).Format("{0:N2}").HtmlAttributes(new { @@class = "col-align-right text-nowrap" });
						}
					}
					else if(mapping.MapSqlToNetType.IsBool)
					{
			@:columns.Bound(c => c.@(property.PropertyName)).Title(EntityLocalizer[nameof(@(Model.ViewDataTypeShortName).@(property.PropertyName))]).Width(100).HtmlAttributes(new { @@class = "text-nowrap" });
					}
					else if(mapping.MapSqlToNetType.IsDateTime)
					{
			@:columns.Bound(c => c.@(property.PropertyName)).Title(EntityLocalizer[nameof(@(Model.ViewDataTypeShortName).@(property.PropertyName))]).Width(180).Format(SharedLocalizer["Format_DateTime"]).HtmlAttributes(new { @@class = "text-nowrap" });
					}
					else if(mapping.MapSqlToNetType.IsDate)
					{
			@:columns.Bound(c => c.@(property.PropertyName)).Title(EntityLocalizer[nameof(@(Model.ViewDataTypeShortName).@(property.PropertyName))]).Width(100).Format(SharedLocalizer["Format_Date"]).HtmlAttributes(new { @@class = "text-nowrap" });
					}
					else if(mapping.MapSqlToNetType.IsTime)
					{
			@:columns.Bound(c => c.@(property.PropertyName)).Title(EntityLocalizer[nameof(@(Model.ViewDataTypeShortName).@(property.PropertyName))]).Width(100).Format(SharedLocalizer["Format_Time"]).HtmlAttributes(new { @@class = "text-nowrap" });
					}
					else {
			@:columns.Bound(c => c.@(property.PropertyName)).Title(EntityLocalizer[nameof(@(Model.ViewDataTypeShortName).@(property.PropertyName))]).Width(200).HtmlAttributes(new { @@class = "text-nowrap" });
					}
					
					break;
				}
			}
		}
		
		if(modelProperties.Contains("CreatedDate"))
		{
			@:columns.Bound(c => c.CreatedDate).Title(BaseEntityLocalizer[nameof(BaseEntityResources.CreatedDate)]).Width(180).Format(SharedLocalizer["Format_DateTime"]).HtmlAttributes(new { @@class = "text-nowrap" });
		}
		if(modelProperties.Contains("UpdatedDate"))
		{
			@:columns.Bound(c => c.UpdatedDate).Title(BaseEntityLocalizer[nameof(BaseEntityResources.UpdatedDate)]).Width(180).Format(SharedLocalizer["Format_DateTime"]).HtmlAttributes(new { @@class = "text-nowrap" });
		}
		if(modelProperties.Contains("CreatedBy"))
		{
			@:columns.Bound(c => c.CreatedBy).Title(BaseEntityLocalizer[nameof(BaseEntityResources.CreatedBy)]).Width(200).HtmlAttributes(new { @@class = "text-nowrap" });
		}
		if(modelProperties.Contains("UpdatedBy"))
		{
			@:columns.Bound(c => c.UpdatedBy).Title(BaseEntityLocalizer[nameof(BaseEntityResources.UpdatedBy)]).Width(200).HtmlAttributes(new { @@class = "text-nowrap" });
		}
		
        
    @:})
    @:.HtmlAttributes(new { style = "height: 600px;" })
	@:.Resizable(r => r.Columns(true))
    @:.Scrollable()
    @:.Groupable()
    @:.Sortable()
	@:.Filterable()
    @:.Pageable(pageable => pageable
        @:.Refresh(true)
        @:.PageSizes(new int[] { 50, 100, 200, 500, 1000 })
        @:.ButtonCount(5))
    @:.DataSource(dataSource => dataSource
        @:.Ajax()
        @:.Read(read => read.Action("Index_Read", ((string)ViewData["ControllerNameForGrid"]), new { ParentId = parentItem?.Id }))
		@:.PageSize(50)
    @:)
@:)
@:
@:<div class="container">
@:	<p>
@:	</p>
@:	<p>
		@:<a asp-action="Create" class="btn btn-primary">@@SharedLocalizer["Btn_CreateNew"]</a>
		
		@:@@if (parentItem != null)
        @:{
		if(hasSortIndex){
			@:<a asp-action="Sort" asp-route-id="@@parentItem.@_idOrSlugName" class="btn btn-primary">@@SharedLocalizer["Btn_SortIndex"]</a>
		}	
        @:    <a asp-action="Index" asp-route-id="" class="btn btn-primary">@@SharedLocalizer["Btn_ListAll"]</a>
        @:}
        @:else
        @:{
		if(hasSortIndex){
			@:<a asp-action="Sort" class="btn btn-primary">@@SharedLocalizer["Btn_SortIndex"]</a>
		}
        @:}

@:	</p>
@:</div>



    if(!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }
}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }

    string GetEnumerableTypeExpression(string typeName)
    {
        return "IEnumerable<" + typeName + ">";
    }
}
