@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@model @Model.ViewDataTypeName
@{
	var listMapping = AtHelper.AtDbContextHelper.ReadMetaDbContext("",  Model.ViewDataTypeName);
	var modelProperties = new List<string>();
    foreach (var property in Model.ModelMetadata.Properties)
    {
        if (property.Scaffold)
        {
            modelProperties.Add(property.PropertyName);
        }
    }
	var _slugProperty = AtHelper.AtDbContextHelper.GetSlugProperty(modelProperties);
	
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:

@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
}

    <h4>@Model.ViewName @Model.ViewDataTypeShortName</h4>
    <hr />
	
@{
	@:<div class="row form-group">
		@:<div class="col-md-3 text-md-right ">
		@:</div>
		@:<div class="col-md-7">
			string pkName = GetPrimaryKeyName();
			if (pkName != null)
			{
				if(_slugProperty != "")
				{
					@:<a asp-action="Edit" asp-route-id="@@Model.@_slugProperty" class="btn btn-primary">Edit</a>
					@:<a asp-action="Delete" asp-route-id="@@Model.@_slugProperty" class="btn btn-danger">Delete</a>
				}
				else {
					@:<a asp-action="Edit" asp-route-id="@@Model.@pkName" class="btn btn-primary">Edit</a>
					@:<a asp-action="Delete" asp-route-id="@@Model.@pkName" class="btn btn-danger">Delete</a>
				}
			}
			else
			{
			@:@@Html.ActionLink("Edit", "Edit", new { /* id = Model.PrimaryKey */ })
			}
			@:<a asp-action="Index" class="k-button">Back to List</a>
		@:</div>
	@:</div>
}

@{
    Dictionary<string, IPropertyMetadata> propertyLookup = ((IModelMetadata)Model.ModelMetadata).Properties.ToDictionary(x => x.PropertyName, x => x);
    Dictionary<string, INavigationMetadata> navigationLookup = ((IModelMetadata)Model.ModelMetadata).Navigations.ToDictionary(x => x.AssociationPropertyName, x => x);

    foreach (var item in Model.ModelMetadata.ModelType.GetProperties())
    {
		@:
        if (propertyLookup.TryGetValue(item.Name, out IPropertyMetadata property)
            && property.Scaffold && !property.IsForeignKey && !property.IsPrimaryKey)
        {
		<div class="row form-group">
			<div class="col-md-3 text-md-right details-label">
				@@Html.DisplayNameFor(model => model.@GetValueExpression(property)) :
			</div>
			@if(property.PropertyName.EndsWith("_Html"))
			{
			@:<div class="col-12 border border-primary">
				@:@@Html.Raw(Model.@property.PropertyName)
			@:</div>
			}
			else
			{
			@:<div class="col-md-7">
				foreach(var mapping in listMapping)
				{
					if (mapping.NetName == property.PropertyName)
					{
						if(mapping.MapSqlToNetType.IsNumeric)
						{
							if(mapping.MapSqlToNetType.IsInteger)
							{
								if (mapping.AllowNull){
									@:@@Model.@(GetValueExpression(property))?.ToString("N0")
								}
								else {
									@:@@Model.@(GetValueExpression(property)).ToString("N0")
								}
							}
							else
							{
								if (mapping.AllowNull){
									@:@@Model.@(GetValueExpression(property))?.ToString("N2")
								}
								else {
									@:@@Model.@(GetValueExpression(property)).ToString("N2")
								}
							}
						}
						else if (property.PropertyName.EndsWith("_Image"))
						{
							@:<img src="@@Url.Content(Model?.@property.PropertyName)" class="border border-primary"/>
						}
						else {
							@:@@Html.DisplayFor(model => model.@GetValueExpression(property))
						}
					}
				}
			@:</div>
			}
		</div>
        }
        else if (navigationLookup.TryGetValue(item.Name, out INavigationMetadata navigation))
        {
        <div class="row form-group">
			<div class="col-md-3 text-md-right details-label">
				@@Html.DisplayNameFor(model => model.@GetValueExpression(navigation)) :
			</div>
			<div class="col-md-7">
				@@Html.DisplayFor(model => model.@(GetValueExpression(navigation)).Name)
			</div>
		</div>
        }
    }
} 

@{
	@:<div class="row form-group">
		@:<div class="col-md-3 text-md-right ">
		@:</div>
		@:<div class="col-md-7">
			if (pkName != null)
			{
				if(_slugProperty != "")
				{
					@:<a asp-action="Edit" asp-route-id="@@Model.@_slugProperty" class="btn btn-primary">Edit</a>
					@:<a asp-action="Delete" asp-route-id="@@Model.@_slugProperty" class="btn btn-danger">Delete</a>
				}
				else {
					@:<a asp-action="Edit" asp-route-id="@@Model.@pkName" class="btn btn-primary">Edit</a>
					@:<a asp-action="Delete" asp-route-id="@@Model.@pkName" class="btn btn-danger">Delete</a>
				}
			}
			else
			{
			@:@@Html.ActionLink("Edit", "Edit", new { /* id = Model.PrimaryKey */ })
			}
			@:<a asp-action="Index" class="k-button">Back to List</a>
		@:</div>
	@:</div>
}
@{
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
        //ClearIndent();
@:</body>
@:</html>
    }
}
@functions
{
    string GetPrimaryKeyName()
    {
        return (Model.ModelMetadata.PrimaryKeys != null && Model.ModelMetadata.PrimaryKeys.Length == 1)
        ? Model.ModelMetadata.PrimaryKeys[0].PropertyName
        : null;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }

    string GetValueExpression(INavigationMetadata navigation)
    {
        return navigation.AssociationPropertyName;
    }
}
